#version 450

#extension GL_GOOGLE_include_directive : enable

#include "PointLightData.h"
#include "SpotLightData.h"
#include "DirectionLightData.h"

#include "NumLights.h"

#include "CameraData.h"

#include "brdf.h"

#define USE_BENT_NORMAL(Options)    Options == 1
#define E(d, n_dot_l)               n_dot_l / max(d * d, 0.000001f)

/**
 * @brief   Функция нормального распределения микрограней.
 * @details За выбор функции распределения отвечает константа специализации DistributionFunctionID.
 *
 * @param [in]  n_dot_h     косинус угла между вектором нормали и медианным вектором.
 * @param [in]  t_dot_h     косинус угла между касательной и медианным вектором.
 * @param [in]  b_dot_h     косинус угла между бикасательной и медианным вектором.
 * @param [in]  roughness   шероховатость.
 * @param [out] D           результат.
*/
#define DISTRIBUTION_FUNCTION(n_dot_h, t_dot_h, b_dot_h, roughness, D)                  \
    switch (DistributionFunctionID) {                                                   \
        case D_BECKAMNN_ID : {                                                          \
            D = D_Beckmann(n_dot_h, roughness);                                         \
            break;                                                                      \
        }                                                                               \
                                                                                        \
        case D_GGX_ID : {                                                               \
            D = D_GGX(n_dot_h, roughness);                                              \
            break;                                                                      \
        }                                                                               \
                                                                                        \
        case D_GGX_ANISOTROPY_ID : {                                                    \
            t_dot_h = max(dot(tangent, h), 0.000001f);                                  \
            b_dot_h = max(dot(btangent, h), 0.000001f);                                 \
                                                                                        \
            D = D_GGX_Anisotropy(n_dot_h, t_dot_h, b_dot_h, roughness, anisotropy);     \
            break;                                                                      \
        }                                                                               \
    } 

/**
 * @brief   Функция геометрии.
 * @details За выбор функции геометрии отвечает константа специализации GeometryFunctionID.
 *
 * @param [in]  n_dot_h     косинус угла между вектором нормали и медианным вектором.
 * @param [in]  n_dot_l     косинус угла между вектором нормали и вектором направления на источник света.
 * @param [in]  n_dot_v     косинус угла между вектором нормали и вектором направления на камеру.
 * @param [in]  v_dot_h     косинус угла между вектором направления на камеру и медианным вектором.
 * @param [in]  roughness   шероховатость.
 * @param [out] G           результат.
*/
#define GEOMETRY_FUNCTION(n_dot_h, n_dot_l, n_dot_v, v_dot_h, roughness, G) \
    switch (GeometryFunctionID) {                                           \
        case G_BECKAMNN_ID : {                                              \
            G = G_Beckmann(n_dot_h, roughness);                             \
            break;                                                          \
        }                                                                   \
                                                                            \
         case G_GGX_ID : {                                                  \
            G = G_GGX(n_dot_h, roughness);                                  \
            break;                                                          \
        }                                                                   \
                                                                            \
        case G_SCHILCK_BECKAMNN_ID : {                                      \
            G = G_SchlickBeckmann(n_dot_h, roughness);                      \
            break;                                                          \
        }                                                                   \
                                                                            \
        case G_SCHILCK_GGX_ID : {                                           \
            G = G_SchlickGGX(n_dot_h, roughness);                           \
            break;                                                          \
        }                                                                   \
                                                                            \
        case G_IMPLICIT_ID : {                                              \
            G = G_Implicit(n_dot_l, n_dot_v);                               \
            break;                                                          \
        }                                                                   \
                                                                            \
        case G_NEUMANN_ID : {                                               \
            G = G_Neumann(n_dot_l, n_dot_v);                                \
            break;                                                          \
        }                                                                   \
                                                                            \
        case G_COOK_TARRANCE_ID : {                                         \
            G = G_CookTorrance(n_dot_h, v_dot_h, n_dot_v, n_dot_l);         \
            break;                                                          \
        }                                                                   \
                                                                            \
        case G_KELEMEN_ID : {                                               \
            G = G_Kelemen(v_dot_h, n_dot_v, n_dot_l);                       \
            break;                                                          \
        }                                                                   \
                                                                            \
        case G_SMITH_ID : {                                                 \
            G = G_Smith(n_dot_l, n_dot_v, roughness);                       \
            break;                                                          \
        }                                                                   \
    }

/**
 * @brief   Функция приближения Френеля.
 * @details За выбор функции приближения отвечает константа специализации FresnelApproximationFunctionID.
 *
 * @param [in] base_color   цвет поверхности.
 * @param [in] metallic     металичность.
 * @param [in]  v_dot_h     косинус угла между вектором направления на камеру и медианным вектором.
 * @param [out] F           результат.
*/
#define FRESNEL_APPROXIMATION_FUNCTION(base_color, metallic, v_dot_h, F)    \
    switch (FresnelApproximationFunctionID) {                               \
        case F_NONE_ID : {                                                  \
            F = F_None(getF0(base_color, metallic));                        \
            break;                                                          \
        }                                                                   \
                                                                            \
        case F_SCHLICK_ID : {                                               \
            F = F_Schlick(getF0(base_color, metallic), v_dot_h);            \
            break;                                                          \
        }                                                                   \
                                                                            \
        case F_COOK_TORRANCE_ID : {                                         \
            F = F_CookTorrance(getF0(base_color, metallic), v_dot_h);       \
            break;                                                          \
        }                                                                   \
    }

layout(constant_id = 0) const uint DistributionFunctionID           = D_GGX_ID;
layout(constant_id = 1) const uint GeometryFunctionID               = G_SMITH_ID;
layout(constant_id = 2) const uint FresnelApproximationFunctionID   = F_SCHLICK_ID;
layout(constant_id = 3) const uint PBR_OtherOptions                 = 0;

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba8) uniform writeonly image2D OutImage;

layout(set = 0, binding = 1) uniform sampler2D PositionAndMetallic;
layout(set = 0, binding = 2) uniform sampler2D NormalAndRoughness;
layout(set = 0, binding = 3) uniform sampler2D AlbedoAndBakedAO;
layout(set = 0, binding = 4) uniform sampler2D TangentAndAnisotropy;

layout(set = 0, binding = 5) uniform readonly u_num_lights
{
    NumLights lights;
} num_lights;

layout(set = 0, binding = 6, std140) uniform readonly u_point_lights_data
{
    PointLightData data[MAX_POINT_LIGHT];
} point_lights_data;

layout(set = 0, binding = 7, std140) uniform readonly u_spot_lights_data
{
    SpotLightData data[MAX_SPOT_LIGHT];
} spot_lights_data;

layout(set = 0, binding = 8, std140) uniform readonly u_direction_lights_data
{
    DirectionLightData data[MAX_DIRECTION_LIGHT];
} direction_lights_dates;

layout(set = 0, binding = 9, std140) uniform readonly u_camera_data
{
    CameraData data;
} camera_data;

vec3 getF0(in lowp const vec3 base_color, float metallic)
{
    return mix(vec3(0.04), base_color, metallic);
}

vec3 calculateBentNormal(
    in mediump const vec3   v,
    in highp const vec3     normal, 
    in highp const vec3     tang, 
    in highp const vec3     btang, 
    float                   aniso
)
{
    vec3 aniso_dir      = aniso > 0.0 ? btang : tang;
    vec3 aniso_tang     = cross(aniso_dir, v);
    vec3 aniso_normal   = cross(aniso_tang, aniso_dir);

    return reflect(-v, normalize(mix(normal, aniso_normal, aniso)));
}

void main()
{
    vec3    Lout    = vec3(0.0f);
    ivec2   uv      = ivec2(gl_GlobalInvocationID.xy);

    vec4 position_and_metallic  = texelFetch(PositionAndMetallic, uv, 0);
    vec4 normal_and_roughness   = texelFetch(NormalAndRoughness, uv, 0);
    vec4 tangent_and_anisotropy = texelFetch(TangentAndAnisotropy, uv, 0);
    vec4 albedo_and_ao          = texelFetch(AlbedoAndBakedAO, uv, 0);

    vec3    normal     = normal_and_roughness.xyz;
    vec3    position   = position_and_metallic.xyz;
    vec3    tangent    = tangent_and_anisotropy.xyz;
    vec3    btangent   = cross(normal, tangent);
    float   dist;
    
    vec3    base_color  = albedo_and_ao.rgb;
    float   roughness   = normal_and_roughness.a * normal_and_roughness.a;
    float   metallic    = position_and_metallic.a;
    float   anisotropy  = tangent_and_anisotropy.a;
    float   ao          = albedo_and_ao.a;

    float   D;
    float   G;
    vec3    F;

    vec3 kd, I;

    vec3    dir_to_camera   = normalize(camera_data.data.position - position);
    vec3    dir_to_light;
    float   n_dot_v         = max(dot(normal, dir_to_camera), 0.000001f);
    float   n_dot_h, n_dot_l, t_dot_h, b_dot_h, v_dot_h;

    vec3 h;

    vec3 spec_component, diff_component;

    vec3    light_dir, light_color;
    float   light_intensity;
    float   light_inner_angle, light_outer_angle;

    if (USE_BENT_NORMAL(PBR_OtherOptions)) {
        normal = calculateBentNormal(dir_to_camera, normal, tangent, btangent, anisotropy);
    }

    /// Points
    for (uint current_light_index = 0; current_light_index < num_lights.lights.point; current_light_index++) {
        light_color     = point_lights_data.data[current_light_index].color_and_intensity.rgb;
        light_intensity = point_lights_data.data[current_light_index].color_and_intensity.a;

        dir_to_light    = normalize(point_lights_data.data[current_light_index].position.xyz - position);
        h               = normalize(dir_to_light + position);
        dist            = length(point_lights_data.data[current_light_index].position.xyz - position);

        n_dot_h = max(dot(normal, h), 0.000001f);
        n_dot_l = max(dot(normal, dir_to_light), 0.000001f);
        v_dot_h = max(dot(dir_to_camera, h), 0.000001f);

        DISTRIBUTION_FUNCTION(n_dot_h, t_dot_h, b_dot_h, roughness, D);
        GEOMETRY_FUNCTION(n_dot_h, n_dot_l, n_dot_v, v_dot_h, roughness, G);
        FRESNEL_APPROXIMATION_FUNCTION(base_color, metallic, v_dot_h, F);

        kd = (1.0f - F) * n_dot_l * M_1_PI;

        spec_component  = (F * D * G) / (4.0f * n_dot_l * n_dot_v); 
        diff_component  = kd * (light_color * light_intensity) * base_color;
        
        I = (light_color * light_intensity) / (4.0f * PI);

        Lout += (diff_component + spec_component) * I * E(dist, n_dot_l);
    }

    /// Spots
    for (uint current_light_index = 0; current_light_index < num_lights.lights.spot; current_light_index++) {
        light_color         = spot_lights_data.data[current_light_index].color_and_intensity.rgb;
        light_intensity     = spot_lights_data.data[current_light_index].color_and_intensity.a;
        light_dir           = spot_lights_data.data[current_light_index].direction_and_outer_radius.xyz;
        light_inner_angle   = spot_lights_data.data[current_light_index].position_and_inner_radius.w;
        light_outer_angle   = spot_lights_data.data[current_light_index].direction_and_outer_radius.w;

        dir_to_light    = normalize(spot_lights_data.data[current_light_index].position_and_inner_radius.xyz - position);
        h               = normalize(dir_to_light + position);
        dist            = length(spot_lights_data.data[current_light_index].position_and_inner_radius.xyz - position);

        n_dot_h = max(dot(normal, h), 0.000001f);
        n_dot_l = max(dot(normal, dir_to_light), 0.000001f);
        v_dot_h = max(dot(dir_to_camera, h), 0.000001f);

        DISTRIBUTION_FUNCTION(n_dot_h, t_dot_h, b_dot_h, roughness, D);
        GEOMETRY_FUNCTION(n_dot_h, n_dot_l, n_dot_v, v_dot_h, roughness, G);
        FRESNEL_APPROXIMATION_FUNCTION(base_color, metallic, v_dot_h, F);

        kd = (1.0f - F) * n_dot_l * M_1_PI;

        spec_component  = (F * D * G) / (4.0f * n_dot_l * n_dot_v); 
        diff_component  = kd * (light_color * light_intensity) * base_color;
        
        I = (light_color * light_intensity) / (4.0f * PI);

        Lout += (diff_component + spec_component) * I * E(dist, n_dot_l) * getSpotAngleAttenuation(dir_to_light, light_dir, light_inner_angle, light_outer_angle);
    }

    vec3 ambient    = base_color * ao;
    vec3 color      = ambient + Lout;

    color   /= color + 1.0f;
    color   = pow(color, vec3(1.0 / 2.2));

    imageStore(OutImage, uv, vec4(color, 1.0)); 
}
